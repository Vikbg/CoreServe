name: Auto Release

on:
  push:
    branches: [main]

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4 # Using a slightly newer version

      - name: Setup Node.js
        uses: actions/setup-node@v4 # Using a slightly newer version
        with:
          node-version: 18 # Recommended to use a supported Node.js LTS version

      - name: Setup pnpm
        uses: pnpm/action-setup@v3 # Using a slightly newer version
        with:
          version: 8
          run_install: false # We will run install manually later

      - name: Cache pnpm store
        uses: actions/cache@v4 # Using a slightly newer version
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: Install dependencies
        run: pnpm install

      - name: Get version from package.json
        id: get_version # Corrected indentation
        run: | # Corrected indentation
          VERSION=$(node -p "require('./package.json').version")
          echo "VERSION=$VERSION" >> $GITHUB_ENV # Correct way to set environment variable

      - name: Check if tag already exists
        id: tag_check
        run: |
          TAG_REF="refs/tags/v${{ env.VERSION }}"
          if git ls-remote --exit-code origin $TAG_REF > /dev/null 2>&1; then
            echo "exists=true" >> "$GITHUB_OUTPUT" # Corrected output syntax
            echo "Tag v${{ env.VERSION }} already exists."
          else
            echo "exists=false" >> "$GITHUB_OUTPUT" # Corrected output syntax
            echo "Tag v${{ env.VERSION }} does not exist."
          fi

      - name: Create GitHub Release
        if: steps.tag_check.outputs.exists == 'false'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: "v${{ env.VERSION }}"
          name: "v${{ env.VERSION }}"
          body: |
            Release automatique bas√©e sur la version package.json
          draft: false # Set to true if you want to create a draft release
          prerelease: false # Set to true if it's a prerelease
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}